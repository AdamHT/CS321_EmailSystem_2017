package email;

import java.util.ArrayList;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.BorderLayout;
import java.awt.Color;
import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;

public class Server 
{
	private ArrayList<Account> remoteAccounts;
	private ArrayList<Account> localAccounts;

	public Server()
	{
		remoteAccounts = new ArrayList<Account>();
		localAccounts = new ArrayList<Account>();
		
		new UserInterface();
		
		/*NewCode
		JFrame serverFrame = new JFrame("Project X Email System - GUI Prototype");

		JPanel headerPanel = new JPanel();
		JButton sendButton = new JButton("Send");
		JButton trashButton = new JButton("Trash");
		JButton replyButton = new JButton("Reply");
		JButton composeButton = new JButton("Compose");
		JPanel userPanel = new JPanel();
		JPanel textPanel = new JPanel();
		JTextArea emailtext = new JTextArea(5, 10);
		JLabel projectX = new JLabel("Project X");
		
		GridBagLayout gridBag = new GridBagLayout();
		GridBagConstraints c = new GridBagConstraints();
		
		headerPanel.setLayout(gridBag);
		c.fill = GridBagConstraints.HORIZONTAL;
		headerPanel.setBackground(Color.lightGray);
		
		DefaultMutableTreeNode top = new DefaultMutableTreeNode("Project X");
		JTree tree = new JTree(top);
		JScrollPane view = new JScrollPane(tree);
		
		c.weightx = 0;
		c.gridx = 1;
		c.gridy = 0;
		c.anchor = GridBagConstraints.FIRST_LINE_START;
		headerPanel.add(projectX);
		
		projectX.setForeground(Color.white);
		projectX.setFont(projectX.getFont().deriveFont(24f)); 
		
		//sendButton add
		c.weightx = 0.5;
		c.gridx = 0;
		c.gridy = 1;
		headerPanel.add(sendButton, c);
		
		//replyButton add
		c.weightx = 0.5;
		c.gridx = 1;
		c.gridy = 1;
		headerPanel.add(replyButton, c);
		
		//composeButton add
		c.weightx = 0.5;
		c.gridx = 2;
		c.gridy = 1;
		headerPanel.add(composeButton, c);
		
		//trashButton add
		c.weightx = 0.5;
		c.gridx = 3;
		c.gridy = 1;
		headerPanel.add(trashButton, c);
		
		//view add
		userPanel.setLayout(gridBag);
		c.gridx = 0;
		c.gridy = 0;
		c.ipadx = 50;
		c.ipady = 400;
		userPanel.add(view, c);
		
		//emailtext add
		textPanel.setLayout(gridBag);
		c.gridx = 0;
		c.gridy = 0;
		c.ipadx = 800;
		c.ipady = 400;
		textPanel.add(emailtext, c);
		emailtext.setEditable(false);
		emailtext.setBackground(Color.gray);
		
		serverFrame.setSize(1000, 500);
		serverFrame.add(headerPanel, BorderLayout.NORTH);
		serverFrame.add(userPanel, BorderLayout.WEST);
		serverFrame.add(textPanel, BorderLayout.EAST);
		serverFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		serverFrame.setVisible(true);
			
		//End NewCode*/
		
	}
	
	public Account findRemoteAccount(String username)
	{
		for (Account a : remoteAccounts)
		{
			if (a.getAccountName() == username)
				return a;
		}
		return null;
	}
	
	public Account findLocalAccount(String username)
	{
		for (Account a : localAccounts)
		{
			if (a.getAccountName() == username)
				return a;
		}
		
		return null;

	}
	
	public void addLocalAccount(Account account)
	{
		localAccounts.add(account);
	}
	
	public void addRemoteAccount(Account account)
	{
		remoteAccounts.add(account);
	}
	
	public void deleteLocalAccount(String username)
	{
		Account localAccount = findLocalAccount(username);
		localAccounts.remove(localAccount);
	}
	
	public void deleteRemoteAccount(String username)
	{
		Account remoteAccount = findRemoteAccount(username);
		remoteAccounts.remove(remoteAccount);
	}
	

}
